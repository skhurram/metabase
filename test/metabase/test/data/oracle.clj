(ns metabase.test.data.oracle
  (:require [clojure.java.jdbc :as jdbc]
            [clojure.string :as s]
            [environ.core :refer [env]]
            (metabase.test.data [generic-sql :as generic]
                                [interface :as i])
            [metabase.util :as u])
  (:import metabase.driver.oracle.OracleDriver))

(defn- get-db-env-var
  " Look up the relevant connection param from corresponding env var or throw an exception if it's not set.

     (get-db-env-var :user) ; Look up `MB_ORACLE_USER`"
  [env-var & [default]]
  (or (env (keyword (format "mb-oracle-%s" (name env-var))))
      default
      (throw (Exception. (format "In order to test Oracle, you must specify the env var MB_ORACLE_%s."
                                 (s/upper-case (name env-var)))))))

(defn- database->connection-details [_ context {:keys [database-name short-lived?]}]
  {:host         (get-db-env-var :host "oracle-test.ce4kuivej1tq.us-east-1.rds.amazonaws.com")
   :port         (Integer/parseInt (get-db-env-var :port "1521"))
   :user         (get-db-env-var :user "cam")
   :password     (get-db-env-var :password "4Cr4QnU4yHM3zQWQ")
   ;; :db           nil ;; (when (= context :db)
   ;;                 ;; database-name)
   :sid          "ORACLE"
   :short-lived? short-lived?})

(def ^:private ^:const field-base-type->sql-type
  {:BigIntegerField "BIGINT"
   :BooleanField    "BIT"
   :CharField       "VARCHAR2(254)"
   :DateField       "DATE"
   :DateTimeField   "TIMESTAMP WITH TIME ZONE"
   :DecimalField    "DECIMAL"
   :FloatField      "FLOAT"
   :IntegerField    "INTEGER"
   :TextField       "TEXT"
   :TimeField       "TIME"})

(defn- drop-table-if-exists-sql [_ {:keys [database-name]} {:keys [table-name]}]
  (format "BEGIN
             EXECUTE IMMEDIATE 'DROP TABLE \"%s\" CASCADE CONSTRAINTS'⅋
           EXCEPTION
             WHEN OTHERS THEN
               IF SQLCODE != -942 THEN
                 RAISE⅋
               END IF⅋
           END⅋"
          table-name))

;; Oracle is doesn't understand the usual `INSERT INTO ... VALUES ...` syntax for inserting multiple rows;
;; Instead it has a wacky `INSERT ALL ... INTO ... VALUES ... INTO ... VALUES ... SELECT * FROM dual` syntax.
;; This doesn't seem to play nice with our IDENTITY PK fields so just fall back to inserting rows one at a time
(defn- load-table-data! [loader dbdef {:keys [rows table-name], :as tabledef}]
  (jdbc/with-db-connection [conn (generic/database->spec loader :db dbdef)]
    (let [fields-for-insert (mapv :field-name (:field-definitions tabledef))
          row-sql           (format "INSERT INTO \"%s\" (%s) VALUES (%s)"
                                    table-name
                                    (apply str (interpose ", " (for [field fields-for-insert]
                                                                 (str \" field \"))))
                                    (apply str (interpose ", " (repeat (count fields-for-insert) \?))))]
      (println (u/format-color 'blue "Inserting rows: %s" row-sql))
      (doseq [row rows]
        (jdbc/execute! conn
                       (apply vector row-sql (for [v row]
                                               (if (instance? java.util.Date v)
                                                 (u/->Timestamp v)
                                                 v)))
                       :multi? false, :transaction? false)))))


(extend OracleDriver
  generic/IGenericSQLDatasetLoader
  (merge generic/DefaultsMixin
         {:create-db-sql             (constantly nil)
          :drop-db-if-exists-sql     (constantly nil)
          :drop-table-if-exists-sql  drop-table-if-exists-sql
          :execute-sql!              generic/sequentially-execute-sql!
          :field-base-type->sql-type (fn [_ base-type] (field-base-type->sql-type base-type))
          :load-table-data!          load-table-data!
          :pk-sql-type               (constantly "INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL")}) ; LOL

  i/IDatasetLoader
  (merge generic/IDatasetLoaderMixin
         {:database->connection-details database->connection-details
          :engine                       (constantly :oracle)}))


(defn- sql! [sql]
  (generic/sequentially-execute-sql! (OracleDriver.) :db metabase.test.data.dataset-definitions/tupac-sightings
                                     sql))

(defn- z! []
  (jdbc/execute! (generic/database->spec (OracleDriver.) :db metabase.test.data.dataset-definitions/tupac-sightings)
                 ["INSERT ALL
                     INTO \"users\" (\"name\", \"last_login\", \"password\") VALUES (?, ?, ?)
                     INTO \"users\" (\"name\", \"last_login\", \"password\") VALUES (?, ?, ?)
                  SELECT * FROM DUAL"

                  "CAMZ"
                  (u/->Timestamp 0)
                  "COOOOOL"

                  "CAM2"
                  (u/->Timestamp (System/currentTimeMillis))
                  "WHUT!"]

                 :multi? false, :transaction? true))

(defn- a []
  (jdbc/query (generic/database->spec (OracleDriver.) :db metabase.test.data.dataset-definitions/tupac-sightings)
              "SELECT * FROM \"users\""))
